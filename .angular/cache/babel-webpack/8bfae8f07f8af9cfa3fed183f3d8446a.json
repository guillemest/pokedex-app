{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { timeout, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RequestHandlerService = /*#__PURE__*/(() => {\n  class RequestHandlerService {\n    constructor(http) {\n      this.http = http;\n      this.timeOut = 60000;\n      this.baseUrl = environment.baseUrl;\n    }\n\n    doGet(url, params) {\n      const httpHeaders = new HttpHeaders().set('Accept', 'application/json');\n      const bodyRequest = {\n        headers: httpHeaders,\n        params: {}\n      };\n\n      if (params) {\n        bodyRequest.params = params;\n      }\n\n      return this.http.get(this.baseUrl + url, bodyRequest).pipe(timeout(this.timeOut), catchError(e => {\n        return throwError(this.handleError(e));\n      })).toPromise().then(res => res).catch(err => {\n        throw err;\n      });\n    }\n\n    handleError(httpErrorResponse) {\n      let errorMessage = 'Unknown error';\n\n      if (!(httpErrorResponse.error instanceof ErrorEvent) && !(httpErrorResponse.error instanceof ProgressEvent)) {\n        errorMessage = `Error: ${httpErrorResponse.error.message}`;\n      } else {\n        errorMessage = `Message: ${httpErrorResponse.message}`;\n      }\n\n      return errorMessage;\n    }\n\n  }\n\n  RequestHandlerService.ɵfac = function RequestHandlerService_Factory(t) {\n    return new (t || RequestHandlerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RequestHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestHandlerService,\n    factory: RequestHandlerService.ɵfac,\n    providedIn: 'root'\n  });\n  return RequestHandlerService;\n})();","map":null,"metadata":{},"sourceType":"module"}